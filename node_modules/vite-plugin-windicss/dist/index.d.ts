import { Plugin } from 'vite';
import { Config } from 'windicss/types/interfaces';

declare const defaultAlias: Record<string, TagNames>;
declare const preflightTags: string[];
declare const htmlTags: readonly ["html", "body", "div", "a", "abbr", "address", "area", "article", "aside", "audio", "base", "basefont", "bdo", "blink", "blockquote", "br", "button", "canvas", "caption", "center", "col", "colgroup", "command", "comment", "datalist", "dd", "del", "details", "dir", "dl", "dt", "embed", "fieldset", "figure", "b", "big", "i", "small", "tt", "font", "footer", "form", "frame", "frameset", "head", "header", "hgroup", "h1", "h2", "h3", "h4", "h5", "h6", "hr", "isindex", "iframe", "ilayer", "img", "input", "ins", "keygen", "keygen", "label", "layer", "legend", "li", "link", "map", "mark", "marquee", "menu", "meta", "meter", "multicol", "nav", "nobr", "noembed", "noframes", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "cite", "code", "dfn", "em", "kbd", "samp", "strong", "var", "plaintext", "pre", "progress", "q", "ruby", "script", "section", "select", "spacer", "span", "s", "strike", "style", "sub", "sup", "svg", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "u", "ul", "video", "wbr", "wbr", "xmp"];
declare type TagNames = (typeof htmlTags)[number];

interface WindiBoxOptions {
    /**
     * Options for windicss/tailwindcss.
     * Also accepts string as config file path.
     *
     * @default 'tailwind.config.js'
     */
    config?: Config | string;
    /**
     * Safe class names to be always included.
     */
    safelist?: string | string[];
    /**
     * Enabled windicss preflight (a.k.a TailwindCSS style reset)
     *
     * @default true
     */
    preflight?: boolean | {
        /**
         * Enable all the preflight regardless the template
         */
        enableAll?: boolean;
        /**
         * Safelist to always included
         */
        safelist?: string | string[];
        /**
          * Alias for resolving preflight
          */
        alias?: Record<string, TagNames>;
        /**
         * @default true
         */
        includeBase?: boolean;
        /**
         * @default true
         */
        includeGlobal?: boolean;
        /**
         * @default true
         */
        includePlugin?: boolean;
    };
    /**
     * Scan the files and extract the usage
     *
     * @default true
     */
    scan?: boolean | {
        /**
         * Auto scan on startup
         *
         * @default true
         */
        runOnStartup?: boolean;
        /**
         * Directories to search for classnames
         *
         * @default 'src'
         */
        dirs?: string[];
        /**
         * File extension to search for classnames
         *
         * @default 'html', 'vue'
         */
        fileExtensions?: string[];
        /**
         * Exclude globs
         *
         * @default []
         */
        exclude?: string[];
        /**
         * Include globs
         *
         * @default []
         */
        include?: string[];
    };
    /**
     * Transform CSS for `@apply` directive
     *
     * @default true
     */
    transformCSS?: boolean;
    /**
     * Transform groups like `hover:(bg-gray-100 font-medium)`
     *
     * @default true
     */
    transformGroups?: boolean;
    /**
     * Sort the genrate utilities
     *
     * @default true
     */
    sortUtilities?: boolean;
    /**
     * Name for debug
     *
     * @default 'windi-box'
     * @internal
     */
    name?: string;
    /**
     * CWD
     *
     * @default process.cwd
     * @internal
     */
    root?: string;
}

declare type WindiBox = ReturnType<typeof createBox>;

declare function createBox(_options?: WindiBoxOptions): {
    options: {
        config: string | Config;
        scan: boolean;
        scanOptions: {
            fileExtensions: string[];
            dirs: string[];
            exclude: string[];
            include: string[];
            runOnStartup: boolean;
        } & {
            runOnStartup?: boolean | undefined;
            dirs?: string[] | undefined;
            fileExtensions?: string[] | undefined;
            exclude?: string[] | undefined;
            include?: string[] | undefined;
        };
        preflight: boolean;
        preflightOptions: {
            includeBase: boolean;
            includeGlobal: boolean;
            includePlugin: boolean;
            enableAll: boolean;
            alias: {};
        } & {
            enableAll?: boolean | undefined;
            safelist?: string | string[] | undefined;
            alias?: Record<string, "object" | "html" | "footer" | "pre" | "base" | "command" | "meta" | "i" | "body" | "div" | "a" | "abbr" | "address" | "area" | "article" | "aside" | "audio" | "basefont" | "bdo" | "blink" | "blockquote" | "br" | "button" | "canvas" | "caption" | "center" | "col" | "colgroup" | "comment" | "datalist" | "dd" | "del" | "details" | "dir" | "dl" | "dt" | "embed" | "fieldset" | "figure" | "b" | "big" | "small" | "tt" | "font" | "form" | "frame" | "frameset" | "head" | "header" | "hgroup" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "hr" | "isindex" | "iframe" | "ilayer" | "img" | "input" | "ins" | "keygen" | "label" | "layer" | "legend" | "li" | "link" | "map" | "mark" | "marquee" | "menu" | "meter" | "multicol" | "nav" | "nobr" | "noembed" | "noframes" | "noscript" | "ol" | "optgroup" | "option" | "output" | "p" | "param" | "cite" | "code" | "dfn" | "em" | "kbd" | "samp" | "strong" | "var" | "plaintext" | "progress" | "q" | "ruby" | "script" | "section" | "select" | "spacer" | "span" | "s" | "strike" | "style" | "sub" | "sup" | "svg" | "table" | "tbody" | "td" | "textarea" | "tfoot" | "th" | "thead" | "time" | "title" | "tr" | "u" | "ul" | "video" | "wbr" | "xmp"> | undefined;
            includeBase?: boolean | undefined;
            includeGlobal?: boolean | undefined;
            includePlugin?: boolean | undefined;
        };
        transformCSS: boolean;
        sortUtilities: boolean;
        safelist: Set<string>;
        root: string;
        transformGroups?: boolean | undefined;
        name?: string | undefined;
    };
    init: () => void;
    extractFile: (code: string) => void;
    generateCSS: () => Promise<string>;
    clearCache: () => void;
    transformCSS: (css: string) => string;
    isDetectTarget: (id: string) => boolean | null;
    isScanTarget: (id: string) => boolean | null;
    isCssTransformTarget: (id: string) => boolean;
    scan: () => Promise<void>;
    files: string[];
    globs: string[];
    classesGenerated: Set<string>;
    classesPending: Set<string>;
    tagsGenerated: Set<string>;
    tagsPending: Set<string>;
    tagsAvailable: Set<string>;
    readonly scanned: boolean;
    readonly configFilePath: string | undefined;
};

declare type UserOptions = Exclude<WindiBoxOptions, 'name' | 'root'>;
declare function VitePluginWindicss(options?: UserOptions): Plugin[];

export default VitePluginWindicss;
export { TagNames, UserOptions, WindiBox, WindiBoxOptions, createBox, defaultAlias, htmlTags, preflightTags };
